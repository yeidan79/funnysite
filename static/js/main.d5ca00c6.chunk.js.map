{"version":3,"sources":["components/Row.js","components/Table.js","components/Scroll.js","components/Button.js","components/Menu.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Row","props","className","data-tip","onMouseOver","updatenumber","onMouseOut","updatestatenumber","id","place","type","effect","messagenumber","value","Table","jokes","map","joke","i","updateNumber","messageNumber","updateStateNumber","key","Scroll","style","overflow","border","height","children","Button","onClick","handleClick","name","Menu","App","request","fetch","then","response","json","setState","chuckjokes","state","concat","totalJokes","lengthchuck","length","totaljokes","newJokes","addJoke","funNumber","prevnum","numatual","alreadyin","data","alreadyIn","msgnumber","prevmsgnumber","text","updateNum","event","val","target","innerText","prevState","this","React","Component","connect","dispatch","onChangeMsgNumber","payload","number","Boolean","window","location","hostname","match","initialStateMsgNumber","store","createStore","action","Object","assign","applyMiddleware","logger","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d5ca00c6.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport './css/Row.css';\r\n\r\nconst Row = (props) => {\r\n  return(\r\n    <tr>\r\n      <td className=\"tc pa3 bg-white\"\r\n          data-tip=\"\"\r\n          onMouseOver={props.updatenumber}\r\n          onMouseOut={props.updatestatenumber}\r\n      >\r\n          {props.id}\r\n          <ReactTooltip place=\"left\" type=\"dark\" effect=\"float\">\r\n            <p>\r\n              {props.messagenumber}\r\n            </p>\r\n          </ReactTooltip>\r\n      </td>\r\n\r\n      <td className=\"pa3 bg-white highlight\">{props.value}</td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React from 'react';\r\nimport Row from './Row';\r\n\r\nconst Table = (props) => {\r\n  return(\r\n    <table className=\"f6 w-100 mw8 center\">\r\n      <thead>\r\n      <tr>\r\n        <th className=\"tc fw6 tl pa3 bg-white f4\">ID</th>\r\n        <th className=\"tc fw6 tl pa3 bg-white f4\"><p className=\"grow-large center pa1 ma1\">Joke!</p></th>\r\n      </tr>\r\n      </thead>\r\n      <tbody className=\"lh-copy\">\r\n      {\r\n        props.jokes.map((joke, i) => {\r\n          return(\r\n            <Row\r\n              updatenumber ={props.updateNumber}\r\n              messagenumber = {props.messageNumber}\r\n              updatestatenumber = {props.updateStateNumber}\r\n              key={i}\r\n              id={i+1}\r\n              value={props.jokes[i].value}\r\n            />\r\n          );\r\n        })\r\n      }\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div className = \"f6 w-100 mw8 center\" style={{overflow: 'scroll',   border: '2px solid black',  height: '400px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\nimport './css/Button.css';\r\n\r\nconst Button = (props) => {\r\n  return(\r\n    <div className=\"tc pa4\">\r\n      <button type=\"button\"\r\n      className=\"f6 noborder dim ph3 pv2 mb2 dib black b colorverde br3 pointer\"\r\n      onClick={props.handleClick}>\r\n        {props.name}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n\r\nconst Menu = (props) => {\r\n  return(\r\n    <div className=\"flex justify-center\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Menu;\r\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Table from '../components/Table';\nimport Scroll from '../components/Scroll';\nimport Button from '../components/Button';\nimport Menu from '../components/Menu';\nimport './App.css';\n\nimport {setMsgNumber} from '../actions'\n\nconst mapStateToProps = state => {\n  return{\n    msgnumber: state.msgnumber\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return{\n    onChangeMsgNumber: (event) => dispatch(setMsgNumber())\n  }\n}\n\nclass App extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      prevmsgnumber: '',\n      numatual: 0,\n      prevnum: 0,\n      alreadyin: false,\n      totaljokes: 0,\n      chuckjokes: []\n    }\n  }\n\n  //CHUCK=====================================================================\n  request = () => {\n    fetch('https://api.chucknorris.io/jokes/random')\n      .then(response => response.json())\n      .then(joke => {this.setState({\n            chuckjokes: this.state.chuckjokes.concat([joke])\n         })\n      });\n  }\n\n  totalJokes = () => {\n    const lengthchuck = this.state.chuckjokes.length + 1;\n    this.setState({\n          totaljokes: lengthchuck\n      })\n  }\n\n  newJokes = () => {\n    this.setState({chuckjokes: []})\n    for(let i = 0 ; i < this.state.totaljokes; i++){\n      this.request()\n    }\n  }\n\n  addJoke = () => {\n    this.request();\n    this.totalJokes();\n  }\n\n  //NUMBERS=====================================================================\n  funNumber = () => {\n    if((this.state.prevnum !== this.state.numatual) && this.state.alreadyin === true){\n      fetch(`http://numbersapi.com/${this.state.numatual}?json`)\n        .then(response => response.json())\n        .then(data => {this.alreadyIn(data)});\n    }\n    if(this.state.prevnum === this.state.numatual){\n        this.setState({\n          msgnumber: this.state.prevmsgnumber\n        })\n    }\n  }\n\n  alreadyIn = (data) => {\n    this.setState({\n          msgnumber: data.text,\n          prevmsgnumber: data.text,\n          alreadyin: false\n    })\n  }\n\n  updateNum =(event) => {\n    const val = event.target.innerText;\n    this.setState(\n      (prevState => {\n        return {\n          alreadyin: true,\n          numatual: val,\n          prevnum: prevState.numatual\n        };\n      }),\n      () => {this.funNumber()}\n    )\n  }\n\n  //RENDER===================================================================\n\n  componentDidMount(){\n    this.setState({\n        totaljokes: 10\n      },\n        () => {\n          for(let i = 0 ; i < this.state.totaljokes; i++){\n          this.request()\n        }\n      })\n  }\n\n  render(){\n    const lengthchuck = this.state.chuckjokes.length;\n    return (\n      <div>\n\n        <div className=\"tc pa4 ma2\">\n          <h1 className=\"f1 b glow\">A funny site!</h1>\n        </div>\n\n        <Scroll>\n            {(lengthchuck === this.state.totaljokes) ? (\n              <Table\n              jokes={this.state.chuckjokes}\n              messageNumber={this.props.msgnumber}\n              updateNumber={this.updateNum}\n              updateStateNumber={this.updateStateNumber}\n              />\n      ) : (\n        <div className=\"flex justify-center pa4\">\n          <h1 className=\"black\">\n            Loading!\n          </h1>\n        </div>\n      )}\n        </Scroll>\n\n        <Menu>\n          <Button\n            handleClick={this.newJokes}\n            name=\"Refresh jokes!\"\n          />\n          <Button\n            handleClick={this.addJoke}\n            name=\"New Joke!\"\n          />\n        </Menu>\n\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\r\n  CHANGE_MSG_NUMBER,\r\n  SET_ALREADY_IN\r\n} from \"./constants\"\r\n\r\nexport const setMsgNumber = (number) => ({\r\n  type: CHANGE_MSG_NUMBER,\r\n  payload: number\r\n})\r\n\r\nexport const setAlreadyIn = (data) => ({\r\n  type: SET_ALREADY_IN,\r\n  payload: data\r\n})\r\n","export const CHANGE_MSG_NUMBER = 'CHANGE_MSG_NUMBER';\r\nexport const SET_ALREADY_IN = 'SET_ALREADY_IN';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  CHANGE_MSG_NUMBER,\r\n  SET_ALREADY_IN\r\n } from './constants';\r\n\r\n const initialStateMsgNumber = {\r\n   msgnumber: 'Loading!'\r\n }\r\n\r\nexport const changeMsgNumber = (state=initialStateMsgNumber, action={}) => {\r\n  switch (action.type) {\r\n    case CHANGE_MSG_NUMBER:\r\n      return Object.assign({}, state, {msgnumber: 'Loading!'})\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport logger from 'redux-logger';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport {changeMsgNumber} from './reducers'\nimport 'tachyons';\n\nconst store = createStore(changeMsgNumber, applyMiddleware(logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}